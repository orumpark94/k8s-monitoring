- name: Deploy Prometheus and Grafana on Worker1
  hosts: master
  become: yes
  tasks:
    - name: Add Prometheus Helm repository
      command: /usr/local/bin/helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      changed_when: false

    - name: Update Helm repositories
      command: /usr/local/bin/helm repo update
      changed_when: false

    - name: Ensure monitoring namespace exists
      shell: |
        kubectl get namespace monitoring || kubectl create namespace monitoring
      changed_when: false
      args:
        executable: /bin/bash

    - name: Create custom values.yaml for Prometheus & Grafana
      copy:
        dest: /tmp/prometheus_values.yaml
        content: |
          nodeSelector:
            kubernetes.io/hostname: "worker1"

          alertmanager:
            enabled: true
            nodeSelector:
              kubernetes.io/hostname: "worker1"
            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                  - matchExpressions:
                    - key: kubernetes.io/hostname
                      operator: In
                      values:
                      - worker1
            service:
              type: NodePort
              nodePort: 30903

          grafana:
            enabled: true
            nodeSelector:
              kubernetes.io/hostname: "worker1"
            service:
              type: NodePort
              nodePort: 30030
            grafana.ini:
              server:
                root_url: "http://worker1:30030"
              auth:
                disable_signout_menu: true

          prometheus:
            enabled: true
            nodeSelector:
              kubernetes.io/hostname: "worker1"
            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                  - matchExpressions:
                    - key: kubernetes.io/hostname
                      operator: In
                      values:
                      - worker1
            prometheusSpec:
              serviceMonitorSelector: {}
              serviceMonitorNamespaceSelector: {}
              storageSpec:
                volumeClaimTemplate:
                  spec:
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: 10Gi
              service:
                type: NodePort
                nodePort: 30090

          prometheusOperator:
            enabled: true
            nodeSelector:
              kubernetes.io/hostname: "worker1"

          kubeStateMetrics:
            enabled: true
            nodeSelector:
              kubernetes.io/hostname: "worker1"

          nodeExporter:
            enabled: true
            tolerations:
              - key: "node-role.kubernetes.io/master"
                operator: "Exists"
                effect: "NoSchedule"

    - name: Deploy or Update Prometheus & Grafana using Helm
      command: >
        /usr/local/bin/helm upgrade --install prometheus prometheus-community/kube-prometheus-stack
        --namespace monitoring
        --values /tmp/prometheus_values.yaml --force --timeout 300s
      changed_when: true

    - name: Wait for Alertmanager Service to be created
      shell: |
        until kubectl get svc -n monitoring prometheus-kube-prometheus-alertmanager -o jsonpath='{.spec.clusterIP}'; do
          echo "Waiting for Alertmanager Service..."
          sleep 5
        done
      register: alertmanager_ip_after
      changed_when: false

    - name: Restart Prometheus Pods to Apply New Config
      command: kubectl rollout restart statefulset -n monitoring prometheus-prometheus-kube-prometheus-prometheus
      ignore_errors: yes
      changed_when: true

    - name: Check Prometheus & Grafana Pod status
      shell: kubectl get pods -n monitoring
      register: pod_status
      changed_when: false

    - name: Display pod status
      debug:
        msg: "{{ pod_status.stdout_lines }}"

    - name: Check Helm release status
      shell: /usr/local/bin/helm list -n monitoring
      register: helm_status
      changed_when: false

    - name: Display Helm status
      debug:
        msg: "{{ helm_status.stdout_lines }}"

    - name: Verify Prometheus Alertmanager Configuration
      shell: |
        kubectl get prometheus -n monitoring prometheus-kube-prometheus-prometheus -o json | jq '.spec.alerting.alertmanagers'
      register: prometheus_alert_config
      changed_when: false

    - name: Display Alertmanager IP after deployment
      debug:
        msg: "Alertmanager IP After: {{ alertmanager_ip_after.stdout }}. Prometheus Config: {{ prometheus_alert_config.stdout }}"
