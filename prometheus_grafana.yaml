- name: Deploy Prometheus and Grafana on Worker1
  hosts: master
  become: yes
  tasks:
    # 1️⃣ Helm Chart 추가 및 업데이트
    - name: Add Prometheus Helm repository
      command: /usr/local/bin/helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      changed_when: false

    - name: Update Helm repositories
      command: /usr/local/bin/helm repo update
      changed_when: false

    # 2️⃣ StorageClass 존재 여부 확인 후 생성 (삭제 없음)
    - name: Check if StorageClass exists
      shell: kubectl get storageclass local-storage --no-headers --ignore-not-found
      register: storageclass_check
      changed_when: false

    - name: Create StorageClass if not exists
      copy:
        dest: /tmp/storageclass.yaml
        content: |
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: local-storage
          provisioner: kubernetes.io/no-provisioner
          volumeBindingMode: Immediate
      when: storageclass_check.stdout == ""
      changed_when: false

    - name: Apply StorageClass (Only if not exists)
      command: kubectl apply -f /tmp/storageclass.yaml
      when: storageclass_check.stdout == ""
      changed_when: false

    # 3️⃣ PVC 상태 확인 (삭제 없이 유지)
    - name: Check if Prometheus PVC exists
      shell: kubectl get pvc -n monitoring | grep prometheus-prometheus-kube-prometheus-prometheus-db || true
      register: pvc_check
      changed_when: false

    - name: Wait for existing PVC to be Bound (if exists)
      shell: |
        until kubectl get pvc -n monitoring | grep prometheus-prometheus-kube-prometheus-prometheus-db | grep Bound; do
          echo "Waiting for existing PVC to be bound..."
          sleep 5
        done
      when: pvc_check.stdout != ""
      changed_when: false

    # 4️⃣ Prometheus & Grafana 배포 (기존 PVC 유지)
    - name: Deploy or Update Prometheus & Grafana using Helm
      command: >
        /usr/local/bin/helm upgrade --install prometheus prometheus-community/kube-prometheus-stack
        --namespace monitoring --create-namespace
        --set prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.storageClassName="local-storage"
        --set prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.resources.requests.storage="10Gi"
        --set prometheus.service.nodePort=30090 --set prometheus.service.type=NodePort
        --set grafana.service.nodePort=30030 --set grafana.service.type=NodePort
        --set alertmanager.service.nodePort=30903 --set alertmanager.service.type=NodePort
        --wait --timeout 600s
      changed_when: true

    # 5️⃣ 배포된 리소스 확인
    - name: Wait for Prometheus & Grafana Pods to be ready
      shell: |
        kubectl rollout status statefulset prometheus-prometheus-kube-prometheus-prometheus -n monitoring
      changed_when: false
      ignore_errors: yes

    - name: Wait for Alertmanager Service to be created
      shell: |
        until kubectl get svc -n monitoring prometheus-kube-prometheus-alertmanager -o jsonpath='{.spec.clusterIP}'; do
          echo "Waiting for Alertmanager Service..."
          sleep 5
        done
      register: alertmanager_ip_after
      changed_when: false

    # 6️⃣ 상태 점검 및 결과 출력
    - name: Check Prometheus & Grafana Pod status
      shell: kubectl get pods -n monitoring -o wide
      register: pod_status
      changed_when: false

    - name: Display pod status
      debug:
        msg: "{{ pod_status.stdout_lines }}"

    - name: Check Helm release status
      shell: /usr/local/bin/helm list -n monitoring
      register: helm_status
      changed_when: false

    - name: Display Helm status
      debug:
        msg: "{{ helm_status.stdout_lines }}"
